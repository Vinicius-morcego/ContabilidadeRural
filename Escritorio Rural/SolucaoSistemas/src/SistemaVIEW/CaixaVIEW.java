/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SistemaVIEW;

import SistemaCTR.CaixaCTR;
import SistemaCTR.CreditoCTR;
import SistemaCTR.DebitoCTR;
import SistemaCTR.PessoaCTR;
import SistemaCTR.PorcentagemCTR;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vinicius
 */
public class CaixaVIEW extends javax.swing.JDialog {

    DateFormat formata = new SimpleDateFormat("HH:mm:ss");

    NumberFormat numero = DecimalFormat.getCurrencyInstance(
            new Locale("pt", "BR"));
    ResultSet lancamento = null;
    Double valor = 0.00, indice = 0.00, saldo = 0.00;
    public static String pegaIndice = "";

    /**
     * Creates new form CaixaVIEW
     *
     * @param parent
     * @param modal
     */
    public CaixaVIEW(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        numero.setMinimumFractionDigits(2);
        txtObservacoes.setDocument(new FixedLenghtDocument(50));
        txtTipo.setDocument(new FixedLenghtDocument(1));
        this.setLocationRelativeTo(null);
        setTitle("MOVIMENTO CONTA CORRENTE");
        UtilVIEW.Icone(this);
        //  UtilVIEW.FormatarCampo(txtValor);
        UtilVIEW.DataAtual(txtData);
        txtCodigo.requestFocusInWindow();
        //   UtilVIEW.DesabilitarCampos(jPanel1);
        UtilVIEW.MudarCursor(btnImprimir, btnSair);
        UtilVIEW.MudarCursorLabel(lblCliente);
        ConsultarCaixa();
        for (int j = 0; j < tblCaixa.getColumnCount(); j++) {
            tblCaixa.getColumnModel().getColumn(j).setCellRenderer(new CellRenderer());
        }
        tblCaixa.getColumnModel().getColumn(0).setMaxWidth(60);
        tblCaixa.getColumnModel().getColumn(3).setMaxWidth(120);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtObservacoes = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCaixa = new javax.swing.JTable();
        lblCliente = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTipo = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        btnImprimir = new javax.swing.JMenu();
        btnSair = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jLabel1.setText("Código:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 11, 70, 14);

        txtCodigo.setForeground(new java.awt.Color(255, 0, 0));
        txtCodigo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodigoKeyPressed(evt);
            }
        });
        jPanel1.add(txtCodigo);
        txtCodigo.setBounds(10, 31, 66, 20);

        jLabel2.setText("Cliente");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(101, 11, 140, 14);

        txtCliente.setEditable(false);
        jPanel1.add(txtCliente);
        txtCliente.setBounds(101, 31, 269, 20);

        jLabel3.setText("Data:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(377, 11, 50, 14);

        txtData.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDataKeyPressed(evt);
            }
        });
        jPanel1.add(txtData);
        txtData.setBounds(377, 31, 67, 20);

        jLabel6.setText("Valor Lançamento:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(10, 110, 90, 14);

        txtValor.setForeground(new java.awt.Color(0, 0, 255));
        txtValor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtValor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValorKeyPressed(evt);
            }
        });
        jPanel1.add(txtValor);
        txtValor.setBounds(10, 130, 90, 20);

        jLabel9.setText("Histórico:");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(10, 60, 45, 14);

        txtObservacoes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtObservacoesKeyPressed(evt);
            }
        });
        jPanel1.add(txtObservacoes);
        txtObservacoes.setBounds(10, 80, 470, 20);

        tblCaixa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblCaixa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente:", "Valor Lançamento:", "Saldo:", "Tipo:", "Data/Hora:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCaixa.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblCaixa);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(7, 170, 660, 140);

        lblCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/lupa_16x16.png"))); // NOI18N
        lblCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblClienteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblClienteMouseEntered(evt);
            }
        });
        jPanel1.add(lblCliente);
        lblCliente.setBounds(81, 30, 20, 20);

        jLabel4.setText("Crédito/Débito:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(110, 110, 80, 14);

        txtTipo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTipo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTipoKeyPressed(evt);
            }
        });
        jPanel1.add(txtTipo);
        txtTipo.setBounds(110, 130, 60, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 670, 320);

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/calculadora_32x32.png"))); // NOI18N
        btnImprimir.setText("Calculadora");
        btnImprimir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnImprimirMouseClicked(evt);
            }
        });
        jMenuBar1.add(btnImprimir);

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/casa_32x32.png"))); // NOI18N
        btnSair.setText("Sair");
        btnSair.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSairMouseClicked(evt);
            }
        });
        jMenuBar1.add(btnSair);

        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 688, 391);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSairMouseClicked
        try {
            int op = -1;
            op = JOptionPane.showConfirmDialog(null, "Deseja sair?", "PERGUNTA",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (op == 0) {
                if (PrincipalVIEW.cliente == true) {
                    PrincipalVIEW.cliente = false;
                } else if (PrincipalVIEW.planoContas == true) {
                    PrincipalVIEW.planoContas = false;
                }
                this.dispose();
            } else if (op == 1) {

            }

        } catch (HeadlessException e) {
            System.out.println("" + e.getMessage());
        }
    }//GEN-LAST:event_btnSairMouseClicked
    public static boolean movimentoCaixa = false;
    private void btnImprimirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImprimirMouseClicked
        try {
            Runtime.getRuntime().exec("calc.exe");
        } catch (IOException ex) {
            System.out.println("Arquivo não encontrado " + ex.getMessage());
        }

    }//GEN-LAST:event_btnImprimirMouseClicked
    public static boolean planoCaixa = false;
    public static boolean formapgto = false;
    private void txtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            ConsultarCliente();
            ConsultarCaixa();
            txtObservacoes.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtCodigoKeyPressed

    private void lblClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblClienteMouseClicked
        if (PrincipalVIEW.planoContas == true) {
            PrincipalVIEW.planoContas = false;
        }
        PrincipalVIEW.cliente = true;
        new PesquisaVIEW(null, true).setVisible(true);
    }//GEN-LAST:event_lblClienteMouseClicked

    private void lblClienteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblClienteMouseEntered
        lblCliente.setToolTipText("Pesquisar cliente");
    }//GEN-LAST:event_lblClienteMouseEntered

    private void txtDataKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {

            txtObservacoes.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtDataKeyPressed

    private void txtObservacoesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtObservacoesKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {

            txtValor.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtObservacoesKeyPressed

    private void txtValorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorKeyPressed
        try {
            if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
                txtValor.setText(numero.format(Double.parseDouble(txtValor.getText().replace(",", "."))));
                txtTipo.requestFocusInWindow();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtValorKeyPressed

    private void txtTipoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTipoKeyPressed
        try {
            if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
                int pergunta = -1;
                pergunta = JOptionPane.showConfirmDialog(null, "Dados estão corretos?",
                        "PEGUNTA", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (pergunta == 0) {
                    if (txtTipo.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Crédito ou Débito?",
                                "ATENÇÃO", JOptionPane.WARNING_MESSAGE);

                    } else if (txtValor.getText().equals("R$ 0,00")) {
                        JOptionPane.showMessageDialog(null, "Preencher o campo valor!",
                                "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
                        txtValor.requestFocusInWindow();
                    } else {
                        CadastrarMovimentoCaixa();
                        ConsultarCaixa();
                        UtilVIEW.FormatarCampo(txtValor);
                        txtObservacoes.setText("");
                        txtCodigo.setText("");
                        txtCliente.setText("");
                        txtCodigo.requestFocusInWindow();
                        txtValor.setText("");
                        txtTipo.setText("");

                    }
                } else if (pergunta == 1) {

                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar lançamento!",
                    "MENSAGEM", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtTipoKeyPressed

    public void ConsultarCliente() {
        try {
            PessoaCTR objpessoaCTR = new PessoaCTR();
            ResultSet codCliente = null;
            codCliente = objpessoaCTR.ConsultarClienteCTR(txtCodigo.getText(), "null");
            if (codCliente.next()) {
                txtCliente.setText(codCliente.getString("nome"));
            } else {
                JOptionPane.showMessageDialog(null, "Código não encontrado!",
                        "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Erro ao consultar o código!",
                    "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void CadastrarMovimentoCaixa() {
        try {
            CaixaCTR objcaixaCTR = new CaixaCTR();
            PorcentagemCTR objporcentagemCTR = new PorcentagemCTR();
            ResultSet bolsonaro = null;
            DateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");
            DateFormat dataSQL = new SimpleDateFormat("yyyy-MM-dd");
            Date pegaData = null;

            pegaData = formataData.parse(txtData.getText());

            Double saldoAnterior = 0.0;
            valor = Double.parseDouble(
                    txtValor.getText().replace("R$", "").replace(".", "").replace(",", "."));
            if (txtTipo.getText().toUpperCase().equals("C")) {
                saldo = (valor * Double.parseDouble(
                        pegaIndice.replace("R$", "").replace(".", "").replace(",", ".")));
            } else if (txtTipo.getText().toUpperCase().equals("D")) {
                saldo = indice - (valor * Double.parseDouble(
                        pegaIndice.replace("R$", "").replace(".", "").replace(",", ".")));
//bolsonaro = objporcentagemCTR.ConsultarPorcentagemCTR();
//                if(bolsonaro.next()){
//                    saldo = indice - (valor * Double.parseDouble(
//                        pegaIndice.replace("R$", "").replace(".", "").replace(",", ".")));
//                    saldo +=((saldo * bolsonaro.getInt("acrescimo"))/100); //saldo com acrescimo
//                }
                
                
            }

            ResultSet pegaSaldoAnterior = null;
            pegaSaldoAnterior = objcaixaCTR.ConsultarSaldoAnteriorCTR(txtCodigo.getText());
            if (pegaSaldoAnterior.next()) {
                saldoAnterior = (pegaSaldoAnterior.getDouble("saldoatual") + saldo);

            } else {
                saldoAnterior = (0 + saldo);
            }

            if (objcaixaCTR.CadastrarCaixaCTR(pegaIndice, txtObservacoes.getText().toUpperCase(),
                    txtCodigo.getText(), saldoAnterior.toString(), dataSQL.format(pegaData) + " "
                    + "" + formata.format(new Date(System.currentTimeMillis())))) {
                if (txtTipo.getText().toUpperCase().equals("C")) {

                    CreditoCTR objcreditoCTR = new CreditoCTR();
                    objcreditoCTR.CadastrarCreditoCTR(
                            txtValor.getText(), "CRÉDITO",
                            txtCodigo.getText(), saldo.toString());
                } else if (txtTipo.getText().toUpperCase().equals("D")) {

                    DebitoCTR objdebitoCTR = new DebitoCTR();
                    objdebitoCTR.CadastrarDebitoCTR(
                            txtValor.getText(), "DÉBITO",
                            txtCodigo.getText(), saldo.toString());
                }
                saldo = 0.0;
                valor = 0.0;
                saldoAnterior = 0.0;
                JOptionPane.showMessageDialog(null, "Salvo com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (HeadlessException | NullPointerException | SQLException | ParseException | 
                IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar!", "ERRO",
                    JOptionPane.ERROR_MESSAGE);
            System.out.println("" + e.getMessage());
        }
    }

    private void ConsultarCaixa() {
        try {
            CaixaCTR objcaixaCTR = new CaixaCTR();
            ResultSet pesq = null;
            pesq = objcaixaCTR.ConsultarCaixaCTR();
            RestaurarCaixa(pesq);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao ConsultarCaixa", "ERRO",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    public void RestaurarCaixa(ResultSet rs) {
        try {
            DefaultTableModel dtm = (DefaultTableModel) tblCaixa.getModel();
            dtm.setRowCount(0);
            while (rs.next()) {
                dtm.addRow(new Object[]{rs.getString("cliente"),
                    numero.format(rs.getDouble("valor")), numero.format(rs.getDouble("saldo")),
                    rs.getString("tipo"),
                    rs.getString("hora")});
            }
            tblCaixa.setModel(dtm);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao RestaurarCaixa", "ERRO",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CaixaVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CaixaVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CaixaVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CaixaVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                CaixaVIEW dialog = new CaixaVIEW(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu btnImprimir;
    private javax.swing.JMenu btnSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JTable tblCaixa;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JTextField txtObservacoes;
    private javax.swing.JTextField txtTipo;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
}
